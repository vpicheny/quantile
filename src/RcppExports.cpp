// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// find_nth
int find_nth(const Rcpp::NumericVector& xa, const int middle);
RcppExport SEXP _Qlab_find_nth(SEXP xaSEXP, SEXP middleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type xa(xaSEXP);
    Rcpp::traits::input_parameter< const int >::type middle(middleSEXP);
    rcpp_result_gen = Rcpp::wrap(find_nth(xa, middle));
    return rcpp_result_gen;
END_RCPP
}
// c_iter_kk
int c_iter_kk(const Rcpp::NumericVector& c1, const Rcpp::NumericVector& c2, const int i2, int imax, int value);
RcppExport SEXP _Qlab_c_iter_kk(SEXP c1SEXP, SEXP c2SEXP, SEXP i2SEXP, SEXP imaxSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type c2(c2SEXP);
    Rcpp::traits::input_parameter< const int >::type i2(i2SEXP);
    Rcpp::traits::input_parameter< int >::type imax(imaxSEXP);
    Rcpp::traits::input_parameter< int >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(c_iter_kk(c1, c2, i2, imax, value));
    return rcpp_result_gen;
END_RCPP
}
// c_order_nv
Rcpp::NumericVector c_order_nv(const Rcpp::NumericVector& vec);
RcppExport SEXP _Qlab_c_order_nv(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(c_order_nv(vec));
    return rcpp_result_gen;
END_RCPP
}
// c_order
std::vector<int> c_order(const Rcpp::NumericVector& vec);
RcppExport SEXP _Qlab_c_order(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(c_order(vec));
    return rcpp_result_gen;
END_RCPP
}
// getIntervals
Rcpp::NumericVector getIntervals(const Rcpp::NumericVector& vec_a, const Rcpp::NumericVector& vec_b, int k, double Imin);
RcppExport SEXP _Qlab_getIntervals(SEXP vec_aSEXP, SEXP vec_bSEXP, SEXP kSEXP, SEXP IminSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type vec_a(vec_aSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type vec_b(vec_bSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type Imin(IminSEXP);
    rcpp_result_gen = Rcpp::wrap(getIntervals(vec_a, vec_b, k, Imin));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Qlab_find_nth", (DL_FUNC) &_Qlab_find_nth, 2},
    {"_Qlab_c_iter_kk", (DL_FUNC) &_Qlab_c_iter_kk, 5},
    {"_Qlab_c_order_nv", (DL_FUNC) &_Qlab_c_order_nv, 1},
    {"_Qlab_c_order", (DL_FUNC) &_Qlab_c_order, 1},
    {"_Qlab_getIntervals", (DL_FUNC) &_Qlab_getIntervals, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_Qlab(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
